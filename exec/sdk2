#!/usr/bin/env bash
#
# Front-end script for SDK2

set -o errexit
set -o pipefail
set -o nounset
#set -o xtrace

### COMMAND-LINE ARGUMENTS ###

# Store and validate arguments

ACTION=$1
PACKAGES=${@:2}

if [[ -z $ACTION ]]; then
    echo "No ACTION specified"
    exit 1
fi

### VALIDATION ###

# Check SDK2_ROOT is set and valid

if [[ -z $SDK2_ROOT ]]; then
    echo "Environment variable SDK2_ROOT is not set"
    exit 1
fi

if [[ ! -d $SDK2_ROOT ]]; then
    echo "Root directory '$SDK2_ROOT' is missing"
    exit 1
fi

# Check SDK2_TMP is set and valid

if [[ -z $SDK2_TMP ]]; then
    echo "Environment variable SDK2_TMP is not set"
    exit 1
fi

if [[ ! -d $SDK2_TMP ]]; then
    echo "Temporary directory '$SDK2_TMP' is missing"
    exit 1
fi

# Check SDK2_PROFILE is set

if [[ -z $SDK2_PROFILE ]]; then
    echo "Environment variable SDK2_PROFILE is not set"
    exit 1
fi

# Check SDK2_RELEASE is set

if [[ -z $SDK2_RELEASE ]]; then
    echo "Environment variable SDK2_RELEASE is not set"
    exit 1
fi

### VARIABLES ###

# Define standard directories

export SDK2_PACKAGE_ROOT=${SDK2_ROOT}/package
export SDK2_PROFILE_ROOT=${SDK2_ROOT}/profile
export SDK2_EXEC_ROOT=${SDK2_ROOT}/exec

export SDK2_SRC_ROOT=${SDK2_TMP}/src
export SDK2_BUILD_ROOT=${SDK2_TMP}/build

# Define platform variables

export SDK2_PLATFORM_NAME=`uname -s`
export SDK2_PLATFORM_ISA=`uname -m`

if [[ $SDK2_PLATFORM_NAME = 'Linux' ]]; then
    if `uname -a | grep -q Ubuntu`; then
	export SDK2_PLATFORM_DISTRO='Ubuntu'
    else
	export SDK2_PLATFORM_DISTRO='Generic'
    fi
fi

# Include profile settings

export profile_dir=${SDK2_PROFILE_ROOT}/${SDK2_PROFILE}

if [[ ! -d $profile_dir ]]; then
    echo "Directory '$profile_dir' is missing"
    exit 1
fi

. ${profile_dir}/settings

if [ $? -ne 0 ]; then
    echo "FAILED when including settings for profile $PROFILE"
    exit 1
fi

# Check profile variables are set

if [[ -n $SDK2_DEST_ROOT ]]; then
    DEST_ROOT=$SDK2_DEST_ROOT
fi

if [[ -z $DEST_ROOT ]]; then
    echo "Profile variable DEST_ROOT is not set"
    exit 1
fi

if [[ -z $PROFILE_NAME ]]; then
    echo "Profile variable PROFILE_NAME is not set"
    exit 1
fi

if [[ -z $PROFILE_ARCH ]]; then
    echo "Profile variable PROFILE_ARCH is not set"
    exit 1
fi

if [[ -z $PROFILE_PREFIX ]]; then
   echo "Profile variable PROFILE_PREFIX is not set"
   exit 1
fi

if [[ -z $PROFILE_URL ]]; then
    echo "Profile variable PROFILE_URL is not set"
    exit 1
fi

if [[ -z $LIB_EXT ]]; then
    echo "Profile variable LIB_EXT is not set"
    exit 1
fi

### PACKAGES ###

# If PACKAGES is empty, read packages from the profile packages list

if [[ -z $PACKAGES ]]; then

    if [[ ! -f ${profile_dir}/packages ]]; then
	echo "Packages list '${profile_dir}/packages' is missing"
	exit 1
    fi

    PACKAGES=(`awk '!/^ *#/ && NF' ${profile_dir}/packages`)

fi

### ENVIRONMENT ###

# On Linux systems, add DEST_ROOT/bin to LD_RUN_PATH. This 
# ensures libraries are found by executables run during 
# the build process

if [[ $SDK2_PLATFORM_NAME = 'Linux' ]]; then
    export LD_RUN_PATH=${DEST_ROOT}/lib:${DEST_ROOT}/lib64
fi

# Set the SDK_ROOT environment variable

export ${PROFILE_PREFIX}_ROOT=${DEST_ROOT}

# If necessary, create src, build and destination directories

for dir in $SDK2_SRC_ROOT $SDK2_BUILD_ROOT $DEST_ROOT; do

    if [[ ! -d $dir ]]; then

	mkdir -p $dir

	if [ $? -ne 0 ]; then
	    echo "FAILED when creating directory '$dir'"
	    exit 1
	fi

    fi

    if [[ ! -w $dir ]]; then
	echo "Directory '$dir' is not writable"
	exit 1
    fi

done

### FUNCTIONS ###

# Main action functions

pre_install() {

    # Launch a subshell, to prevent environment leakage

    (

	# Re-import settings

	. ${profile_dir}/settings

	export PATH=${SDK2_EXEC_ROOT}:$PATH

	# Set full path variables

	PD=${SDK2_PROFILE_ROOT}/${SDK2_PROFILE}

	# Import the pre-install commands

	. ${PD}/pre_install
	    
	if [ $? -ne 0 ]; then
	    echo "FAILED when including pre-install commands"
	    exit 1
	fi

    )

}

post_install () {

    # Launch a subshell, to prevent environment leakage

    (

	# Re-import settings

	. ${profile_dir}/settings

	export PATH=${SDK2_EXEC_ROOT}:$PATH

	# Set full path variables

	PD=${SDK2_PROFILE_ROOT}/${SDK2_PROFILE}

	# Import the post-install definition

	. ${PD}/post_install
	    
	if [ $? -ne 0 ]; then
	    echo "FAILED when including post-install commands"
	    exit 1
	fi

    )

}

packages_install () {

    # Loop over the packages

    for PACKAGE in ${PACKAGES[*]}; do

	# Launch a subshell, to prevent environment leakage

	(

	    # Re-import settings

	    . ${profile_dir}/settings

	    export PATH=${SDK2_EXEC_ROOT}:$PATH

	    # Import the package definition. This should define the following
	    # variables:
	    #
	    # SRC_FILE    -- file name of tarball (optional)
	    # PATCH_FILES -- file names of patches (optional)
	    # SRC_DIR     -- directory name to unpack into
	    # BUILD_DIR   -- directory name to build in (optional, defaults to SRC_DIR)
	    #
	    # ...and the following functions
	    #
	    # fetch()   -- fetch source code from server (optional)
	    # unpack()  -- unpack source code, apply patches (optional)
	    # build()   -- build
	    # install() -- install (optional)

	    . ${SDK2_PACKAGE_ROOT}/${PACKAGE}
	    
	    if [ $? -ne 0 ]; then
		echo "FAILED when including definition for package $PACKAGE"
		exit 1
	    fi

	    # Check package variables are set

	    if [[ -z $SRC_DIR ]]; then
		echo "Package variable SRC_DIR is not set"
		exit 1
	    fi

	    if [[ -z $BUILD_DIR ]]; then
		BUILD_DIR=$SRC_DIR
	    fi

	    # Set full path variables

	    if [[ -n $SRC_FILES ]]; then
		SF=${SRC_FILES[@]/#/$SDK2_SRC_ROOT/}
	    elif [[ -n $SRC_FILE ]]; then
		SF=${SDK2_SRC_ROOT}/${SRC_FILE}
	    fi

	    if [[ -n $PATCH_FILES ]]; then
		PF=${PATCH_FILES[@]/#/$SDK2_SRC_ROOT/}
	    fi

	    SD=${SDK2_BUILD_ROOT}/${SRC_DIR}
	    BD=${SDK2_BUILD_ROOT}/${BUILD_DIR}

	    PD=${SDK2_PROFILE_ROOT}/${SDK2_PROFILE}

	    # Take action

	    case $ACTION in
		fetch)
		    fetch
		    ;;
		fetch_only)
		    fetch
		    ;;
		unpack)
		    fetch
		    unpack
		    ;;
		unpack_only)
		    unpack
		    ;;
		build)
		    fetch
		    unpack
		    build
		    ;;
		build_only)
		    build
		    ;;
		install)
		    fetch
		    unpack
		    build
		    install
		    ;;
		install_only)
		    install
		    ;;
		*)
		    echo "Invalid ACTION specified"
		    exit 1
		    ;;
	    esac

	    # Finish

	)

	if [ $? -ne 0 ]; then
	    echo "Action $ACTION failed for package $PACKAGE"
	    exit 1
	fi

    done

}

clean () {

    # Clean src and build directories
    
    rm -rf ${SDK2_SRC_ROOT}/*
    rm -rf ${SDK2_BUILD_ROOT}/*

}


# Default package functions

fetch () {

    echo "Fetching sources into ${SDK2_SRC_ROOT}"

    for fetch_file in $SF $PF; do

	if [[ ! -f $fetch_file ]]; then

	    url=$PROFILE_URL/`basename $fetch_file`

	    echo "  `basename $fetch_file`"

	    curl $url -s -o $fetch_file
	    
	    if [ $? -ne 0 ]; then
		echo "FAILED in fetch for package $PACKAGE (file $fetch_file, url $url)"
		exit 1
	    fi

	fi

    done

}

unpack () {

    echo "Unpacking package $PACKAGE into $SD"

    # Create the source directory

    rm -rf $SD
    mkdir $SD

    # Unpack the tarballs

    for src_file in $SF; do

	tar xf $src_file -C $SD --strip-components 1

	if [ $? -ne 0 ]; then
	    echo "FAILED in tar for package $PACKAGE (file $src_file)"
	    exit 1
	fi

    done

    # Apply patches

    for patch_file in $PF; do

	patch -d $SD -p1 < $patch_file

	if [ $? -ne 0 ]; then
	    echo "FAILED in patch for package $PACKAGE (file $patch_file)"
	    exit 1
	fi

    done

}

build () {

    echo "Attempt to call default build function for package $PACKAGE"

    exit 1

}

install () {

    echo "Installing package $PACKAGE from $BD"

    # Install

    cd $BD

    make install

    if [ $? -ne 0 ]; then
	echo "FAILED in install for package $PACKAGE"
	exit 1
    fi

}

### ACTION ###

# Take action

case $ACTION in
    pre_install)
	pre_install
	;;
    packages_install)
	ACTION=install
	packages_install
	;;
    post_install)
	post_install
	;;
    fetch|fetch_only|unpack|unpack_only|build|build_only|install|install_only)
	packages_install
	;;
    clean)
	clean
	;;
    all)
	ACTION=install
	pre_install
	packages_install
	post_install
	;;
    *)
	echo "Syntax: sdk2 pre_install|packages_install|post_install|install <package_list>"
	exit 1
esac

